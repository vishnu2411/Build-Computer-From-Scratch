// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        DMux(in= true, sel= instruction[15], a= ains, b= cins);

        Mux16(a= instruction, b= aluout, sel= cins, out= m1out); // A register input mux
        Mux16(a= aout, b= inM, sel= instruction[12], out= m2out); // A register output mux

        Or(a= ains, b= instruction[5], out= loadrega);
        And(a= cins, b= instruction[4], out= loadregd);

        Register(in= m1out, load= loadrega, out[0..14]= addressM, out= aout); //A register
        DRegister(in= aluout, load= loadregd, out= dout); //D register
        ALU(x= dout, y= m2out, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= outM, out= aluout, zr= zrout, ng= ngout);

        And(a= cins, b= instruction[3], out= writeM);

        Or(a= zrout, b= ngout, out= le);
        Not(in= zrout, out= nzrout); 
        Not(in= ngout, out= nngout); 
        Not(in= le, out= gt);

        Mux8Way16(a[0]= false, b[0]= gt, c[0]= zrout, d[0]= nngout, e[0]= ngout, f[0]= nzrout, g[0]= le, h[0]= true, sel= instruction[0..2], out[0]= lpc1);
        And(a= cins, b= lpc1, out= lpc);

        PC(in= aout, load= lpc, inc= true, reset= reset, out[0..14]= pc);
	//// Replace this comment with your code.
}